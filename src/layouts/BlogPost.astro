---
import { getCollection, type CollectionEntry } from "astro:content";
import Tag from "../components/Tag.astro";
import FormattedDate from "../components/FormattedDate.astro";
import { Image } from "astro:assets";
import BaseLayout from "./BaseLayout.astro";

type Props = CollectionEntry<"blog">["data"];

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const postIndex = posts.findIndex((post) => post.slug === Astro.params.slug);

const [previousPost, nextPost] = [
  postIndex > 0 ? posts[postIndex - 1] : null,
  postIndex < posts.length - 1 ? posts[postIndex + 1] : null,
];
const { title, description, pubDate, updatedDate, heroImage, tags } =
  Astro.props;
---

<BaseLayout
  title={title}
  description={description}
  image={heroImage?.src}
  breadcrumbs={[{ path: "/blog", name: "Blog" }]}>
  <article>
    <div>
      {
        heroImage && (
          <Image
            width={1020}
            height={510}
            src={heroImage}
            class="mb-5 rounded-lg"
            alt=""
          />
        )
      }
    </div>
    <div class="mb-5">
      {tags.map((tag) => <Tag tag={tag} />)}
    </div>
    <div
      class="prose mb-10 max-w-none dark:prose-invert prose-code:before:hidden prose-code:after:hidden prose-pre:overflow-scroll prose-img:mx-auto">
      <div>
        <h1 class="mb-0">{title}</h1>
        <div class="date">
          <FormattedDate date={pubDate} />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
      </div>
      <slot />
    </div>
  </article>
  <div
    class="mb-5 mt-5 flex w-full flex-col items-center gap-10 md:flex-row md:justify-between md:gap-2">
    {
      previousPost ? (
        <a
          href={"/blog/" + previousPost.slug}
          data-sveltekit-reload
          class="flex items-center self-start text-sm text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-6 w-6">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M15.75 19.5L8.25 12l7.5-7.5"
            />
          </svg>

          <span class="ml-2">{previousPost.data.title}</span>
        </a>
      ) : (
        <div />
      )
    }
    {
      nextPost ? (
        <a
          href={"/blog/" + nextPost.slug}
          data-sveltekit-reload
          class="flex items-center self-end text-sm text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100">
          <span class="mr-2">{nextPost.data.title}</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="h-6 w-6">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M8.25 4.5l7.5 7.5-7.5 7.5"
            />
          </svg>
        </a>
      ) : (
        <div />
      )
    }
  </div>
</BaseLayout>
